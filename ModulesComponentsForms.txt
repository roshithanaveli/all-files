Components
----------
Every Angular application has at least one component, the root component that connects a component hierarchy with the page document object model (DOM). 

Each component defines a class that contains application data and logic, and is associated with an HTML template that defines a view to be displayed in a target environment.

The @Component() decorator identifies the class immediately below it as a component, 
and provides the template and related component-specific metadata.

components can be nested and data can be communicated from one component to another ie., from
parent to child or vice versa



To create a sub component
-------------------------
1. create a parent component using
	ng new Parentcompt 

2. open the integrated editor, go to the terminal and create a child component 
   inside the parent

	ng g c childcompt --spec=false -it is

where --specs=false ----> no testing file to be created.
-it ----> inline template
-is ----> inline css are used.

Inside the app.module.ts we can see the child component is created.

open the childcomponent.ts file where you can see the selector tag, template and styles here 
we need to provide the html tag, and css decorations in template and styles respectively.

In the app.component.html just embbed the child selector tag ie., <app-chilldcomponent> then
your child component is just inserted into parent.

component communication
-----------------------
Data can be communicated from : parent to child
or from child to parent.

1. Parent to Child
-------------------
It is implemented using input decorator.

To pass the data to child, first we need to bind the data using property binding
syntax:

app.component.html
-------------------

<app-childcompnent [uname]="username"></app-childcompnent>

app.component.ts
----------------

export class AppComponent {
  title = 'parentcomponent';
  username:string="Praveen Kumar";
}


In order to recognise the child component that the property is from parent, we need to
decorate this tag using input decorator.

childcomponent.ts
-----------------
import { Component, OnInit, Input } from '@angular/core'; // import the input module


export class ChildcompnentComponent implements OnInit {

  @Input()
  uname:string;      // decorate with Input() tag to specify to get data from parent.

  constructor() { }

  ngOnInit() {
  }

}

child to parent
---------------
child.ts
--------
import { Component, OnInit, EventEmitter, Output} from '@angular/core';

@Component({
  selector: 'app-child',
  template: `
    <p>
      child works!
    </p>
    <button (click)="sendMessage()">SendToParent</button>
  `,
  styles: [
  ]
})
export class ChildComponent implements OnInit {
  @Output()
  notify:EventEmitter<string>= new EventEmitter<string>();
  sendMessage(){
    this.notify.emit("This Message is from Child component");
  }
  
  constructor() { }

  ngOnInit() {
  }

}

app.ts
------
import { Component } from '@angular/core';

@Component({
  selector: 'app-root',
  templateUrl: './app.component.html',
  styleUrls: ['./app.component.css']
})
export class AppComponent {
  title = 'parent';
  info:string;
  getMessage(data){
    this.info=data;
  }
}


app.html
--------
<!--The content below is only a placeholder and can be replaced.-->
<div style="text-align:center">
  <h1>
    Welcome to {{ title }}!
  </h1>
  <app-child (notify)="getMessage($event)"></app-child>
  <h2>{{info}}</h2>
  <router-outlet></router-outlet>

Modules
-------

Module in Angular refers to a place where you can group the components, directives, 
pipes, and services, which are related to the application.

In case you are developing a website, the header, footer, left, center and the right 
section become part of a module.

To define module, we can use the NgModule. When you create a new project 
using the Angular –cli command, 

the ngmodule is created in the app.module.ts

Example
-------
import { BrowserModule } from '@angular/platform-browser';
import { NgModule } from '@angular/core';
import { AppComponent } from './app.component';

@NgModule({
   declarations: [
      AppComponent
   ],
   imports: [
      BrowserModule
   ],
   providers: [],
   bootstrap: [AppComponent]
})

export class AppModule { }


It starts with @NgModule and contains an object which has declarations, imports, providers and bootstrap.


Declaration
------------
It is an array of components created. If any new component gets created, 
it will be imported first and the reference will be included in declarations.

declarations: [
   AppComponent,
   NewCmpComponent
]


Import
-------
It is an array of modules required to be used in the application. 
It can also be used by the components in the Declaration array. 

For example, right now in the @NgModule we see the Browser Module imported. 
In case an application needs forms, we can include the module as follows -

import { FormsModule } from '@angular/forms';


imports: [
   BrowserModule,
   FormsModule
]


Providers
----------
This will include the services created.

Bootstrap
----------
This includes the main app component for starting the execution.


Pipes  --> to filter the data 
-----
Lowercase
Uppercase
Date
Currency
Json
Percent
Decimal
Slice



Routing
-------

create the main component.
create the sub components ng g c home, ng g c aboutus, ng g c contactus


app.module.ts
-------------
import { BrowserModule } from '@angular/platform-browser';
import { NgModule } from '@angular/core';

import { AppRoutingModule } from './app-routing.module';
import { AppComponent } from './app.component';
import { HomeComponent } from './home/home.component';
import { AboutusComponent } from './aboutus/aboutus.component';
import { ContactusComponent } from './contactus/contactus.component';
import {RouterModule, Routes} from '@angular/router'

const appRoutes :Routes=[
{path:'home', component:HomeComponent },
{path:'aboutus', component:AboutusComponent},
{path:'contactus', component:ContactusComponent},
{path:'', redirectTo:'/home',pathMatch:'full' },
{path:'**', redirectTo:'/home',pathMatch:'full' }

]

@NgModule({
  declarations: [
    AppComponent,
    HomeComponent,
    AboutusComponent,
    ContactusComponent
  ],
  imports: [
    BrowserModule,
    AppRoutingModule,
    RouterModule.forRoot(appRoutes)
  ],
  providers: [],
  bootstrap: [AppComponent]
})
export class AppModule { }

app.component.ts
----------------
import { Component } from '@angular/core';

@Component({
  selector: 'app-root',
  templateUrl: './app.component.html',
  styleUrls: ['./app.component.css']
})
export class AppComponent {
  title = 'serviceexample';
}


app.component.html
------------------

<ul class="list-group">
  <li class="list-group-item list-group-item-primary"> <a routerLink='/home'>Home </a></li>
  <li class="list-group-item list-group-item-secondary"><a routerLink='/aboutus'>About Us </a></li>
  <li class="list-group-item list-group-item-success"><a routerLink='/contactus'>ContactUs </a></li>

</ul>
<router-outlet></router-outlet>

app-routing.ts
--------------
import { NgModule } from '@angular/core';
import { Routes, RouterModule } from '@angular/router';

const routes: Routes = [];

@NgModule({
  imports: [RouterModule.forRoot(routes)],
  exports: [RouterModule]
})
export class AppRoutingModule { }

