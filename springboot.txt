Spring Boot
------------
It is a Spring module which provides RAD (Rapid Application Development) feature 
to Spring framework.

It is used to create stand alone spring based application that you can just run 
because it needs very little spring configuration.

Spring Boot does not generate code and there is absolutely no 
requirement for XML configuration.

It uses convention over configuration software design paradigm that means it 
decrease the effort of developer.

springboot = spring - xml + server

Advantages of Spring Boot
--------------------------
1. Create stand-alone Spring applications that can be started using java -jar.

2. Embed Tomcat, Jetty or Undertow directly. You don't need to deploy WAR files.

3. It provides opinionated 'starter' POMs to simplify your Maven configuration.

4. It automatically configure Spring whenever possible.

5. It provides production-ready features such as metrics, health checks and externalized    
configuration.

Spring Boot Features
--------------------
1. Web Development
2. SpringApplication
3. Application events and listeners
4. Admin features
5. Externalized Configuration
6. Properties Files
7. YAML Support
8. Type-safe Configuration
9. Logging


Building the First Application
-------------------------------

pom.xml
--------
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>
  <groupId>com.examples</groupId>
  <artifactId>HelloSpringBoot</artifactId>
  <version>0.0.1-SNAPSHOT</version>
  <start-class>demo.DemoApplication</start-class>
  
  <parent>
  	<groupId>org.springframework.boot</groupId>
  	<artifactId>spring-boot-starter-parent</artifactId>
  	<version>1.5.4.RELEASE</version>
  </parent>
  <dependencies>
  	<dependency>
  		<groupId>org.springframework.boot</groupId>
  		<artifactId>spring-boot-starter-web</artifactId>
  	</dependency>
	<dependency>
		<groupId>
		<artificatId>
	</ .....>
  </dependencies>
  <properties>
  	<java-version>1.8</java-version>
	<node-js>2.1</....>
  </properties>
</project>


main class
-----------

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

@RestController
@SpringBootApplication
public class HelloWorldspring {
	public static void main(String args[]) {
		SpringApplication.run(HelloWorlpring.class,args);
	}
	
	@RequestMapping(value="/")
	public String hello() {
		return "Hello Spring world...!";
	}

}

@RestController
public class MyServiceClass 
{

	@RequestMapping(value="/")
	public String hello() {
		return "Hello Spring world...!";
	}

}


Tomcat Deployment
------------------
To get the war file support extend the class from SpringBootServletInitializer 
and override the method configure which returns SpringApplicationBuilder object

@SpringBootApplication
public class DemoApplication  extends SpringBootServletInitializer {
   @Override
   protected SpringApplicationBuilder configure(SpringApplicationBuilder application) {
      return application.sources(DemoApplication.class);
   }
   public static void main(String[] args) {
      SpringApplication.run(DemoApplication.class, args);
   }
}

in the pom.xml class
--------------------

<start-class>demo.DemoApplication</start-class>

<packaging>war</packaging>

